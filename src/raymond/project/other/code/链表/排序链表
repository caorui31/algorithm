/*
 * @lc app=leetcode.cn id=148 lang=java
 *
 * [148] 排序链表
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        
        // 归并排序，先通过快慢指针找到链表的中间节点
        if(head == null || head.next == null) {
            return head;
        }

        ListNode slow = head;
        ListNode fast = head;
        ListNode mid = head; // 用来将前后两个链表中断
        while(fast != null && fast.next != null) {
            mid = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        mid.next = null;

        return mergeList(sortList(head), sortList((slow)));
    }

    public ListNode mergeList(ListNode node1, ListNode node2) {
        if(node1 == null) return node2;
        if(node2 == null) return node1;
        if(node1.val < node2.val) {
            node1.next = mergeList(node1.next, node2);
            return node1;
        } else {
            node2.next = mergeList(node2.next, node1);
            return node2;
        }
    }
}

