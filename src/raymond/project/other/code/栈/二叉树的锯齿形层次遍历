import java.util.LinkedList;
import java.util.Queue;

import javax.swing.tree.TreeNode;

/*
 * @lc app=leetcode.cn id=103 lang=java
 *
 * [103] 二叉树的锯齿形层次遍历
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer> > ans = new ArrayList<>();
        if(root == null) {
            return ans;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean isReverse = false; // 第一行不反转
        while(!queue.isEmpty()) {
            LinkedList<Integer> curList = new LinkedList<>();

            int count = queue.size();
            for(int i = 0;i < count ; ++i) {
                TreeNode tmp = queue.poll();
                if(isReverse) { 
                    curList.addFirst(tmp.val);
                } else {
                    curList.add(tmp.val);
                }

                if(tmp.left != null) {
                    queue.add(tmp.left);
                }

                if(tmp.right != null) {
                    queue.add(tmp.right);
                }
            }
            isReverse = !isReverse;
            ans.add(curList);
        }
        return ans;
    }
}
// @lc code=end

