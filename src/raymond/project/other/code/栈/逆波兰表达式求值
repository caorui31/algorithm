/*
 * @lc app=leetcode.cn id=150 lang=java
 *
 * [150] 逆波兰表达式求值
 */

// @lc code=start
class Solution {
    public int evalRPN(String[] tokens) {
        /**
         * 借助一个栈
         * 如果是数字则入栈，如果是符号则将栈顶两个数字出栈并计算。将计算后的结果入栈
         */
        Stack<Integer> stack = new Stack<>();

        for(String token: tokens) {
            if(isNumeric(token)) {
                stack.add(Integer.parseInt(token));
            } else {
                Integer num2 = stack.pop();
                Integer num1 = stack.pop();

                if("+".equals(token)) {
                    stack.add(num1+num2);
                } else if("-".equals(token)) {
                    stack.add(num1-num2);
                } else if("*".equals(token)) {
                    stack.add(num1*num2);
                } else if("/".equals(token)) {
                    stack.add(num1/num2);
                }
            }
        }
        return stack.pop();
    }

    public static boolean isNumeric(String str){
        if(str.equals("-")) {
            return false;
        }
        for (int i = 0; i < str.length(); i++){
           if (!Character.isDigit(str.charAt(i))
           && str.charAt(i) != '-') {
            return false;
           }
        }
        return true;
    }
}
// @lc code=end

